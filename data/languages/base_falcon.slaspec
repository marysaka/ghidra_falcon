# Base specification for the Nvidia Falcon

define endian=little;
define alignment=1;

define space ram type=ram_space size=4 default;
define space dram type=ram_space size=4;
define space register type=register_space size=4;

# gpr
define register offset=0 size=4 [
  r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
];

define register offset=0x40 size=4 [
  iv0 iv1 _ tv sp pc xcbase xdbase flags cx cauth xtargets tstatus
];

# unpacked flags
define register offset=0x100 size=1 [
  CF # bit 8
  OF # bit 9
  SF # bit 10
  ZF # bit 11
];



# TODO: define flags?

@define P0_flag "flags[0, 1]"
@define P1_flag "flags[1, 1]"
@define P2_flag "flags[2, 1]"
@define P3_flag "flags[3, 1]"
@define P4_flag "flags[4, 1]"
@define P5_flag "flags[5, 1]"
@define P6_flag "flags[6, 1]"
@define P7_flag "flags[7, 1]"
@define C_flag "CF"
@define O_flag "OF"
@define S_flag "SF"
@define Z_flag "ZF"

macro unpackflags(tmp) {
  CF = (tmp & 0x100) != 0;
  OF = (tmp & 0x200) != 0;
  SF = (tmp & 0x400) != 0;
  ZF = (tmp & 0x800) != 0;
}

macro packflags(tmp) {
  tmp = (tmp & 0xFFFFF0FF)
    | (0x100 * zext(CF & 1))
    | (0x200 * zext(OF & 1))
    | (0x400 * zext(SF & 1))
    | (0x800 * zext(ZF & 1));
}



# 8 bits format & size of opcode
define token opcode_len_format (8)
  # raw opcode for unsized instructions
  raw_opcode=(0, 7)
  raw_opcode_lo=(0, 3)
  raw_opcode_hi=(4, 7)
  op_size=(6, 7)
  op_format=(0, 5)
  o1_format=(0, 3)
  reg0=(0, 3)
;

define token opcode_byte1 (8)
  reg2=(0, 3)
  sreg2=(0, 3)
  reg1=(4, 7)
  sreg1=(4, 7)
  subopcode2=(0, 3)
  subopcodeb1_0_2=(0, 2)
  subopcodeb1_0_5=(0, 5)
  subopcodeb1_0_7=(0, 7)
  subopcodeL=(0, 6)
  pred1=(0, 2)
;

define token opcode_byte2 (8)
  subopcode3=(0, 3)
  reg3=(4, 7)

  bitf8_0=(0,4)
  bitf8_1=(5,7)

  subopcode_crypti=(0,4)
;


define token opcode_byte4 (8)
  subopcode5=(0, 3)

  crypt_extra=(0, 1)
  #subopcode_crypt=(2, 7)
;

define token crypt_pair (16)
  creg1=(0, 2)
  creg2=(4, 6)
  cimm2=(4, 9)


  cunk1=(0, 3)
  cunk2=(4, 9)
  subopcode_crypt=(10,15)
;

define token immediate8 (8)
  imm8=(0, 7)
  imm8s=(0, 7) signed
  fimm8=(0, 7)
  fimm8s=(0, 7) signed
;

define token opcode_immediate16 (16)
  imm16=(0, 15)
  imm16s=(0, 15) signed
  fimm16=(0, 15)
  fimm16s=(0, 15) signed

  bitf16_0=(0,4)
  bitf16_1=(5,9)
;

define token opcode_immediate24 (24)
  fimm24s=(0, 23) signed
  fimm24=(0, 23)
;

define token opcode_immediate32 (32)
  fimm32=(0, 31)
;

# TODO: define opcode48 (seems used for bra on fuc5)

attach variables [ reg0 reg1 reg2 reg3 ]
[
  r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
];

attach variables [ sreg1 sreg2 ]
[
  iv0 iv1 _ tv sp pc xcbase xdbase flags cx cauth xtargets tstatus _ _ _
];

attach names [ creg1 creg2 ]
[
  c0 c1 c2 c3 c4 c5 c6 c7
];

rel8: target is imm8s [ target = inst_start + imm8s; ] {
  export *:4 target;
}

rel16: target is imm16s [ target = inst_start + imm16s; ] {
  export *:4 target;
}

addr16: imm16 is imm16 {
  export *:4 imm16;
}

fimm24st: target is fimm24s [ target = 0 + fimm24s; ] {
  export *:4 target;
}
define pcodeop todo;
define pcodeop todo_flags;

@include "macro.sinc"
@include "unsized_inst.sinc"

@if defined(SUPPORT_FUC5P)
@include "fuc5_inst.sinc"
@endif


@if defined(CRYPT_EXTENSION)
@include "crypt_inst.sinc"
@endif


@include "envydis.sinc"


@include "sized.sinc"


# constructor start































