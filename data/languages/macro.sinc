macro todo_binop(dst, src1, src2) {
  dst = todo(src1, src2);
}

macro store32(addr, value) {
  *[dmem]:4 (addr) = value;
}
macro store16(addr, value) {
  *[dmem]:2 (addr) = value;
}
macro store8(addr, value) {
  *[dmem]:1 (addr) = value;
}
macro load32(dst1, addr) {
  dst1 = *[dmem]:4 (addr);
}
macro load16(dst1, addr) {
  dst1 = *[dmem]:2 (addr);
}
macro load8(dst1, addr) {
  dst1 = *[dmem]:1 (addr);
}

macro xbit(dst1, src1, bit1) {
  dst1 = (src1 >> bit1) & 1;
}

macro op_sext(dst, src1, src2) {
  local shift_distance = (31 - (src2 & 0x1F));
  dst = (src1 << shift_distance) s>> shift_distance;
}

macro bclr(reg1, bit1) {
  reg1 = reg1 & ~(1 << bit1);
}

macro bset(reg1, bit1) {
  reg1 = reg1 | (1 << bit1);
}

macro btgl(reg1, bit1) {
  reg1 = reg1 ^ (1 << bit1);
}

macro push32(val32) {
  sp = sp - 4;
  *[dmem]:4 sp = val32;
}

macro pop32(ret32) {
  sp = sp + 4;
  ret32 = *[dmem]:4 sp;
}

macro ret() {
  pop32(pc);
  return [pc];
}

macro setResultFlags(result) {
  $(Z_flag) = (result == 0);
  $(S_flag) = (result s< 0);
}

macro clear(dst) {
  dst = 0;
}

macro mov(dst, src) {
  dst = src;
}

macro and(dst, src1, src2) {
  dst = src1 & src2;

  $(C_flag) = 0;
  $(O_flag) = 0;
  setResultFlags(dst);
}

macro or(dst, src1, src2) {
  dst = src1 | src2;

  $(C_flag) = 0;
  $(O_flag) = 0;
  setResultFlags(dst);
}

macro xor(dst, src1, src2) {
  dst = src1 ^ src2;

  $(C_flag) = 0;
  $(O_flag) = 0;
  setResultFlags(dst);
}

macro shl32(dst, src1, src2) {
  dst = src1 << (src2 & 0x1F);

  $(O_flag) = 0;
  setResultFlags(dst);
}

macro shr32(dst, src1, src2) {
  dst = src1 >> (src2 & 0x1F);

  $(O_flag) = 0;
  setResultFlags(dst);
}

macro sar32(dst, src1, src2) {
  dst = src1 s>> (src2 & 0x1F);

  $(O_flag) = 0;
  setResultFlags(dst);
}

macro add(dst, src1, src2) {
  $(C_flag) = carry(src1,src2);
  $(O_flag) = scarry(src1,src2);
  dst = src1 + src2;
  setResultFlags(dst);
}


macro adc(dst, src1, src2) {
  # TODO: this assumes these flags match x86
  local cf_copy = zext($(C_flag));
  $(C_flag) = carry(src1, src2);
  $(O_flag) = scarry(src1, src2);
  local result = src1 + src2;
  $(C_flag) = $(C_flag) || carry(result, cf_copy);
  $(O_flag) = $(O_flag) ^^ scarry(result, cf_copy);
  dst = result + cf_copy;
  setResultFlags(dst);
}


macro sub(dst, src1, src2) {
  $(C_flag) = src1 < src2;
  $(O_flag) = sborrow(src1,src2);
  dst = src1 - src2;
  setResultFlags(dst);
}

macro cmp(src1, src2) {
  # TODO: check flag correctness
  setResultFlags((src1 - src2));
  $(C_flag) = src1 < src2;
  $(O_flag) = sborrow(src1, src2);
}

macro cmpu(src1, src2) {
  # TODO: is this right?
  $(C_flag) = (src1 < src2);
  $(Z_flag) = (src1 == src2);
}

macro cmps(src1, src2) {
  $(C_flag) = (src1 s< src2);
  $(Z_flag) = (src1 == src2);
}


# TODO: check if that set flags on hardware
macro mulu(dst, src1, src2) {
  dst = zext(src1) * zext(src2);
}

macro hswap16(dst, src) {
  dst = ((src & 0xFF) << 8) | ((src & 0xFF00) >> 8);
  setResultFlags(dst);
  $(O_flag) = 0;
}

macro hswap8(dst, src) {
  # TODO: is this even a thing?
  dst = ((src & 0xF) << 4) | ((src & 0xF0) >> 4);
  setResultFlags(dst);
  $(O_flag) = 0;
}

macro not(dst, src) {
  dst = ~src;
  setResultFlags(dst);
  $(O_flag) = 0;
}

macro neg(dst, src) {
  dst = -src;
  setResultFlags(dst);
  $(O_flag) = sborrow(0, dst);
}


